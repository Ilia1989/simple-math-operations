package work;

import interfaces.IOperations;

/**
 * @author Ilko
 *
 */
public class Operations extends Values implements IOperations {

	public Operations() {

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#subtraction(int, int)
	 */
	@Override
	public int subtraction(int a, int b) {
		int result = a - b;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#summation(int, int)
	 */
	@Override
	public int summation(int a, int b) {
		int result = a + b;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#multyplication(int, int)
	 */
	@Override
	public int multiplication(int a, int b) {
		int result = a * b;
		return result;
	}

	/**
	 * @param a
	 * @param b
	 */
	public static void division(int a, int b) {
		if((a % b) != 0){
		    double res = ((double)a / b);
		    System.out.printf("Division: %.2f", res);
		} else {
		    int res = a / b;
		    System.out.println("Division: " + res);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#subtraction(double, double)
	 */
	@Override
	public double subtraction(double a, double b) {
		double result = a - b;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#summation(double, double)
	 */
	@Override
	public double summation(double a, double b) {
		double result = a + b;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#multyplication(double, double)
	 */
	@Override
	public double multiplication(double a, double b) {
		double result = a * b;
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see interfaces.IOperations#devidion(double, double)
	 */
	@Override
	public double division(double a, double b) {
		double result = a / b;
		return result;
	}
}
